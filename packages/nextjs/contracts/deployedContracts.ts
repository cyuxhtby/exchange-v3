/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    MockTokens: {
      address: "0xd0141e899a65c95a556fe2b27e5982a6de7fdd7a",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getTokenAddress",
          inputs: [
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getTokenCount",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "symbolToIndex",
          inputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokens",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "decimals",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "tokenAddress",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
      ],
      inheritedFunctions: {
        allowance: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decreaseAllowance: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        increaseAllowance: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom: "lib/valantis-core/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    PoolFactory: {
      address: "0xffa7ca1aeeebbc30c874d32c7e22f052bbea0429",
      abi: [
        {
          type: "function",
          name: "deploy",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "_constructorArgs",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "deployment",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "nonce",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
      ],
      inheritedFunctions: {
        deploy: "lib/valantis-core/src/protocol-factory/interfaces/IPoolDeployer.sol",
      },
    },
    Vault: {
      address: "0x3aade2dcd2df6a8cac689ee797591b2913658659",
      abi: [
        {
          type: "function",
          name: "addPoolTokens",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "_tokens",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "alm",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "claimPoolManagerFees",
          inputs: [
            {
              name: "_feePoolManager0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_feePoolManager1",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "deposit",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "_token",
              type: "address",
              internalType: "address",
            },
            {
              name: "_amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "executeMultiHopSwap",
          inputs: [
            {
              name: "path",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "amounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "recipient",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getReservesForPool",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "_tokens",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getTokensForPool",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "tokens",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "quoteToRecipient",
          inputs: [
            {
              name: "_isZeroToOne",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "_amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setALM",
          inputs: [
            {
              name: "_alm",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "tokenList",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "updateReserves",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "_tokens",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "_amounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "verifyPath",
          inputs: [
            {
              name: "path",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "amounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "_token",
              type: "address",
              internalType: "address",
            },
            {
              name: "_amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "error",
          name: "SovereignVault__addPoolTokens_tokensAlreadySet",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__claimPoolManagerFees_onlyPool",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__getReservesForPool_invalidPool",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__multiHopSwap_invalidPath",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__quoteToRecipient_onlyALM",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__updateReserves_arrayLengthMismatch",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__verifyPath_arrayLengthMismatch",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignVault__withdraw_insufficientReserves",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        claimPoolManagerFees: "lib/valantis-core/src/pools/interfaces/ISovereignVaultMinimal.sol",
        getReservesForPool: "lib/valantis-core/src/pools/interfaces/ISovereignVaultMinimal.sol",
        getTokensForPool: "lib/valantis-core/src/pools/interfaces/ISovereignVaultMinimal.sol",
      },
    },
    ALM: {
      address: "0x38a024c0b412b9d1db8bc398140d00f5af3093d4",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "_vault",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "depositLiquidity",
          inputs: [
            {
              name: "_amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_verificationContext",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "amount0Deposited",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "amount1Deposited",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "fee0",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "fee1",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getLiquidityQuote",
          inputs: [
            {
              name: "_almLiquidityQuotePoolInput",
              type: "tuple",
              internalType: "struct ALMLiquidityQuoteInput",
              components: [
                {
                  name: "isZeroToOne",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "amountInMinusFee",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "feeInBips",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "sender",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "recipient",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "tokenOutSwap",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct ALMLiquidityQuote",
              components: [
                {
                  name: "isCallbackOnSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "amountOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountInFilled",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onDepositLiquidityCallback",
          inputs: [
            {
              name: "_amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onSwapCallback",
          inputs: [
            {
              name: "_isZeroToOne",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "pool",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "vault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "withdrawLiquidity",
          inputs: [
            {
              name: "_amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_recipient",
              type: "address",
              internalType: "address",
            },
            {
              name: "_verificationContext",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "LogSwapCallback",
          inputs: [
            {
              name: "isZeroToOne",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "SovereignALM__depositLiquidity_notPermissioned",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignALM__depositLiquidity_zeroTotalDepositAmount",
          inputs: [],
        },
        {
          type: "error",
          name: "SovereignALM__onlyPool",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        getLiquidityQuote: "lib/valantis-core/src/ALM/interfaces/ISovereignALM.sol",
        onDepositLiquidityCallback: "lib/valantis-core/src/ALM/interfaces/ISovereignALM.sol",
        onSwapCallback: "lib/valantis-core/src/ALM/interfaces/ISovereignALM.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
